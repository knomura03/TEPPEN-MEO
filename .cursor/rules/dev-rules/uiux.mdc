---
description: 
globs: 
alwaysApply: true
---
# デザインシステム

## 理念・基本方針

### デザインシステムの理念
-   **ガイダンス**
    -   基本精神
        -   行政サービスの誰一人も取り残さない「アクセシビリティファースト」精神を掲げる
        -   WCAG等の基準を最大限取り入れる
    -   設計思想
        -   特定のブランドに依存しない高い汎用性を重視
        -   各サービスごとにカスタマイズ可能なプラットフォーム型デザインシステムとして設計
    -   持続可能性
        -   ウェブ技術や利用者ニーズの変化に対応
        -   継続的かつ持続可能な改善・研究を行うことを理念とする
-   **実装面**
    -   直接的な実装項目はない
    -   これらの理念が全コンポーネントとガイドラインの基本方針となる

### アクセシビリティ指針
-   **ガイダンス**
    -   最優先事項としてのアクセシビリティ
        -   本デザインシステムはアクセシビリティを最優先事項として構築
    -   配慮事項
        -   色の組み合わせとコントラスト比
        -   フォントサイズ
        -   キーボード操作とフォーカス指標
        -   リンクやボタンのターゲット領域
        -   操作に応じたインタラクション
        -   動きのある要素の扱い
        -   コンテンツ量増減への対応
    -   目標
        -   WCAGなどの達成基準の適合を容易にする
    -   責任範囲
        -   各サイト固有のコンテンツのアクセシビリティ確保は制作者側の責任
        -   デザインシステムの導入でその下地を提供
-   **実装**
    -   デザインシステム規定の利用
        -   カラー、タイポグラフィ等を用いることで以下を確保
            -   適切なコントラスト
            -   十分なテキストサイズ
    -   キーボード操作とフォーカス
        -   全コンポーネントでキーボード操作とフォーカス可視性が考慮済み
    -   開発者の役割
        -   WAI-ARIA等を必要に応じ併用
        -   コンテンツ作成時にもアクセシビリティ要件を遵守
            -   代替テキストなど

### スタイルガイド作成
-   **ガイダンス**
    -   プラットフォーム型デザインシステム
        -   デジタル庁DSは個々のサイトに合わせたスタイルガイドを作成して使用
    -   再定義の必要性
        -   企業固有のブランド方針を持たない抽象度の高い体系
        -   各サイトでデザインシステムの枠組みに沿って以下を再定義
            -   ブランドカラー
            -   タイポグラフィ
            -   ロゴ使用ルール等
        -   これにより各サイト固有のトーン＆マナーに即したUI表現を実現
    -   コンポーネントやテンプレートの追加
        -   各サイトの情報構造に応じて必要な場合
        -   デザインシステムのプリミティブを基に独自規定を追記してスタイルガイド化
-   **実装**
    -   初期ステップ
        -   **Figma**で提供されるデザインデータを複製
        -   自サイトのブランド要素を適用
            -   色
            -   書体
            -   ロゴ等
    -   カスタマイズ
        -   不要なコンポーネントを除去
        -   必要な要素を追加
        -   ガイドラインを調整
    -   開発
        -   完成したスタイルガイドに沿って実装
        -   CSSカスタムプロパティやデザイントークンを上書き
        -   自サイト用のデザインテーマを実装

## 基本デザイン要素

### カラー（色の体系）
-   **基本デザイン**
    -   役割
        -   各サイトのスタイルガイドで必要となるカラースキーム（配色体系）を構築するためのシステム
        -   ブランドを視覚的に体現
        -   コンポーネントの意味や機能に一貫性を持たせる
    -   主要色
        -   **キーカラー**を定義
        -   プライマリー、セカンダリー、ターシャリー、背景色など
            -   同一色相の階調から選定
    -   共通色
        -   白～黒の**ニュートラルカラー**
            -   基調としてテキスト、背景、境界線に使用
    -   特殊色
        -   **アクセントカラー**
            -   注意喚起したい要素に限定的に使用
        -   **セマンティックカラー**
            -   特定の意味を持つ色として定義
                -   例: 成功=緑、エラー=赤、警告=黄/橙
    -   重要事項
        -   十分なコントラスト比を満たす
        -   サイト内で一貫した運用
-   **実装**
    -   デザイントークンの適用
        -   提供されたデザイントークンに従い、プライマリー等の色コードを設定
    -   階調色の設定
        -   プライマリーと同色相で明度違いの色をセカンダリー・ターシャリーに割り当て
        -   最低3:1以上の隣接コントラストを確保
    -   ニュートラルカラーの運用
        -   ニュートラルグレー系はUI全体の背景・文字色に用いる
        -   必要に応じてWCAG達成基準を満たす組み合わせに調整
    -   アクセントカラーの運用
        -   乱用せず統一感を維持
    -   セマンティックカラーの運用 (例: Success, Error, Warning)
        -   背景色による見え方の変化を考慮
            -   各用途で十分テスト
            -   特に背景が白/黒以外の場合はコントラストを再確認

### タイポグラフィ（書体とテキストスタイル）
-   **基本デザイン**
    -   採用フォント
        -   サンセリフ書体: **Noto Sans JP** (SIL Open Font License)
        -   等幅フォント: **Noto Sans Mono**
        -   特徴
            -   可読性・視認性が高い
            -   Webフォントとして無料利用可能
            -   環境依存文字の表示崩れを防ぐ
            -   （必要に応じシステム標準フォントへのフォールバックも許容）
    -   文字サイズ
        -   基本: 16px以上
        -   補足的用途: 14px (限定)
        -   原則不使用: 14px未満
    -   行間 (line-height)
        -   本文や通常UIテキスト: 少なくとも150%推奨
        -   見出しなど大きな文字: 相対的に狭め可読性を確保
        -   デザインシステム定義: 用途に応じ100%～175%まで幅広く定義
    -   テキストスタイル (5種類、トークン化)
        -   **Display (Dsp)**
        -   **Standard (Std)**
            -   見出し～本文に使う基本スタイル
            -   45px～16pxまで段階的にサイズ定義
            -   小さい文字ほど行高・字間を大きく設定
        -   **Dense (Dns)**
            -   管理画面等情報量優先時に用いる
            -   小サイズ・狭い行間のスタイル
        -   **Oneline (Oln)**
            -   ボタン等1行テキスト専用
            -   行高100%に抑えたスタイル
        -   **Mono**
            -   コード表示用
            -   等幅フォント＋行高150%で可読性担保
        -   各スタイルで推奨値をトークン化
            -   フォントサイズ
            -   太さ
            -   行高
            -   字間
-   **実装**
    -   フォント読み込み
        -   `<link>`やCSS `@font-face`でNoto Sans JP/Webフォントを読み込む
    -   テキストサイズ
        -   ベース: 16px
        -   `rem`や相対単位を用いてレスポンシブに対応
    -   行間
        -   デザイン指示に基づきCSSの`line-height`数値（単位無し）で設定
    -   テキストスタイル管理
        -   デザイントークンとして命名されたテキストスタイル（例: `Std-17N-170`）
        -   CSSクラスや変数で管理し、統一したタイポグラフィ階層を適用
        -   例:
            -   Displayスタイル: 見出し用に `font-size:57px; line-height:140%` 等
            -   Denseスタイル: 小文字用に `font-size:16px; line-height:120%` 等
    -   字間 (letter-spacing)
        -   小さな文字では適宜 `letter-spacing:0.02em` 程度字間を拡げ、可読性を向上

### レイアウトとグリッド
-   **基本デザイン**
    -   目的
        -   文書構造上の要素を画面内に整然と配置
        -   情報を明確に伝達
    -   グリッドシステム採用
        -   一貫したレイアウトを容易にするため
        -   構成要素
            -   マージン（左右余白）
            -   カラム（列）
            -   ガター（列間余白）
        -   基本: 12カラムグリッド
    -   レスポンシブ対応
        -   画面サイズに応じたレイアウト変換を設計
        -   例:
            -   デスクトップ: ページ全幅を12等分したグリッド
            -   モバイル: 単一カラムやシンプルなカラム構成に自動で落とし込む想定
    -   ブレークポイント
        -   標準: 幅768px
        -   768px以上: デスクトップレイアウト
        -   768px未満: モバイルレイアウト (例示)
    -   マージン
        -   画面が狭くなってもコンテンツ左右に余白を確保
    -   ガター（列間）
        -   本文フォントサイズの2倍程度離す
        -   隣接テキストの誤読防止
    -   サイドメニュー
        -   必要に応じ、左側に固定幅または可変幅のサイドメニュー領域を設けたレイアウトも想定
    -   提供テンプレート例
        -   1カラム
        -   2カラム
        -   3カラム
        -   4カラムなど典型的なレイアウトパターン
-   **実装**
    -   構築方法
        -   CSSグリッドやフレックスレイアウトを使用
        -   12等分グリッドを構築
    -   デスクトップ例
        -   コンテナに `max-width` を設定
        -   `.col-1`～`.col-12`のようなクラスで幅の割合を指定
    -   ガター設定
        -   CSSの `gap` やマージンでテキストサイズの倍数となるよう設定
    -   レスポンシブ実装
        -   768pxを基準にメディアクエリでレイアウト変更
        -   モバイル時は各カラムを100%幅ブロックにする等
    -   サイドメニュー実装
        -   メニュー部分を固定
        -   残りをグリッドコンテナとして配置
        -   メニュー直後に適切なマージンを入れてグリッド開始位置を調整

### リンクテキスト（ハイパーリンク）
-   **基本デザイン**
    -   基本定義
        -   通常の文章と視覚的に区別できる色や下線付きのテキスト
        -   指定URLへのハイパーリンクを表す
    -   視覚的特徴
        -   内部リンク・外部リンクを問わず、周囲のテキストとは異なる色と下線（またはアイコン）を組み合わせ
        -   フォーカス可能なインタラクティブ要素であることを明示
    -   外部リンク・新規タブ表示
        -   リンク末尾に外部遷移アイコンを表示して内部リンクと区別
            -   アイコン自体は下線を引かれないがクリック可能領域に含む
    -   色の一貫性
        -   リンクの色はサイト内で統一
        -   未訪問と訪問済みで異なる色を設定し、ユーザーが閲覧履歴を把握しやすくする
    -   インタラクション
        -   Hover時やActive時にはリンク色や下線、背景色などを変化させ、ユーザーに視覚フィードバックを提供
-   **実装**
    -   HTML要素
        -   標準の `<a>` 要素を使用
    -   スタイリング
        -   スタイルシートでリンク色・装飾を定義
        -   例:
            -   デフォルト: 青字に青下線
            -   `a:hover`: 下線太さや背景色を変更 (サイトのトンマナに合わせる)
        -   `a:visited` 疑似クラスに別色（例: 紫）を指定し、未訪問との区別を明確に
    -   外部リンクのアイコン
        -   アイコン用の `<img>` やWebアイコンフォントを隣接配置
        -   視覚的指標とする
        -   アクセシビリティ対応
            -   リンクテキストと一緒にスクリーンリーダーに読まれるよう適切に `<span>` に含める
            -   または `aria-label` で補足
    -   フォーカス
        -   リンク全体をフォーカスできるよう `outline` など標準のフォーカス表示を維持

### 余白（スペース）
-   **基本デザイン**
    -   役割
        -   テキスト・画像・アイコンなど要素間に適度な空間を与え、デザインの視覚的バランスと調和を生み出す
        -   情報の明確さ、可読性、操作性を高め、ユーザー体験向上に寄与
    -   手段
        -   **パディング**（内側余白）
        -   **マージン**（外側余白）
        -   **行間**
        -   コンポーネント間の**空白**
    -   余白スケール
        -   デザインシステムで推奨の段階的なスペースサイズを定義
        -   必要に応じてデザイントークン化して利用
    -   余白の適用ルール
        -   重要度の高い要素ほど周囲に大きな余白を持たせ視覚的焦点を強める
        -   階層的に下位の要素ほど余白を減らし、上位情報に従属する関係を示す
        -   例:
            -   大見出しの上下には小見出しよりも広い余白
            -   段落間も適切な間隔で読みやすく
-   **実装**
    -   余白スケールの割り当て
        -   CSS変数やクラスに標準の余白スケール値を割り当て
            -   例: `--spacing-s: 8px; --spacing-m:16px; --spacing-l:32px` 等
        -   コンポーネント間・内部の余白を統一
    -   具体的な適用
        -   見出しやセクション間の余白はデザイン指定に従う
            -   例: `margin-bottom: var(--spacing-l)`
    -   コンポーネント既定のパディング
        -   ボタンやカード等、デザインシステム準拠の値が組み込まれている場合はそのまま使用
    -   独自コンポーネント追加時
        -   既存スケール値から選択し、余白の統一感を維持
    -   調整
        -   必要ならばFigma上で提供される余白トークンを参照して調整
        -   その値をCSSに反映

### 角の形状（コーナー半径）
-   **基本デザイン**
    -   効果
        -   ボタンやカードなどに適用して画面に視覚的な変化を与える
        -   コンポーネントの機能理解を助ける
    -   基本の目安 (5段階)
        -   角丸なし
        -   スモール
        -   ミディアム
        -   ラージ
        -   フル（完全な丸）
        -   各コンポーネントはスタイルガイド上でいずれかの角丸値に統一
    -   調整の必要性
        -   コンポーネントの大きさや縦横比によって、同じ半径でも丸みの見え方が異なる場合がある
        -   必要に応じて個別に角丸半径を調整し視覚的一貫性を維持
        -   例:
            -   小さなボタンと大きなカードで同じ「ミディアム角丸」を適用
            -   前者の方が相対的に丸く見える場合、カード側の半径を増やす等の対応
-   **実装**
    -   デザイントークン
        -   角丸半径が定義されている (例: 0px, 4px, 8px, 16px, 9999pxなど)
        -   SCSS変数やCSSカスタムプロパティで参照
    -   適用方法
        -   コンポーネントごとに適切なクラスを付与
            -   例: `.radius-sm` は `border-radius:4px`
            -   例: `.radius-full` は `border-radius:9999px`
    -   適用ルール例
        -   フォーム要素 (ボタン、入力欄): 通常スモールまたはミディアム
        -   カード、モーダルなど: ラージ
        -   全体の調和を図る
    -   微調整
        -   視覚テストを行い、要素ごとに丸み具合が均一に感じられるよう値を適用

### エレベーション（高さ表現）
-   **基本デザイン**
    -   概念
        -   ブラウザ画面上でコンポーネントの「持ち上がり具合（重なり高さ）」を示す
    -   高さレベル
        -   レベル0 (エレベーション無し): デフォルト。ページ背景上に直接配置される通常状態 (例: カード, ボタン)
        -   より高いエレベーション値: 他コンポーネントの上に重なって表示 (例: ダイアログ, スナックバー)
    -   視覚表現 (2種類)
        -   **ドロップシャドウ** (影)
            -   背景（ページ表面）に落とす影
            -   レベル1: ごく薄い影
            -   レベルが上がるにつれ濃く大きな影となり、要素が浮いて見える擬似的立体感を与える
        -   **オーバーレイシェード** (重ねた際に下に敷く半透明の幕)
            -   モーダルなどが開いた際に下層コンテンツを覆って操作を遮断する半透明背景
            -   黒に近いグレーの半透明シェードを画面全体に敷く
-   **実装**
    -   レベル割り当て
        -   コンポーネントごとにデザインシステム既定のエレベーションレベルを割り当て
    -   ドロップシャドウ実装 (CSS `box-shadow`)
        -   レベルごとにスタイルを定義
        -   例: `.elevation-1` で `0px 2px 4px rgba(...,0.2)` 等の影を付与
        -   レベルが上がるごとに影の距離・ぼかし・濃さを増す
    -   オーバーレイシェード実装
        -   ダイアログなどには `position:fixed; top:0;` 等で最前面に配置
        -   同時に画面全体に `::before` 擬似要素で半透明シェードを出現
            -   例: `background: rgba(0,0,0,0.5)`
    -   レベル0の要素
        -   影を付けずフラットにする (例: 通常のカード)
    -   `z-index` 管理
        -   レベルに応じて適切な `z-index` 値を割り振り、重なり順を制御
        -   例: シェードは1000、モーダル本体は1010、通知バーは900など

## コンポーネント

### アコーディオン
-   **概要**
    -   機能: ユーザーが必要に応じてコンテンツの表示/非表示を切り替えられる
    -   操作: 見出しとなるタイトル部分をクリックまたはキー操作で直下のコンテンツ領域を展開・収縮
    -   利点: 画面スペースを節約
    -   用途例: FAQ、項目一覧
    -   ドキュメント: ※現在、デザインガイドライン文書は準備中
-   **実装**
    -   HTML構造
        -   `<details>`/`<summary>` 要素を利用
        -   または `div`＋JavaScriptで実装
    -   ヘッダ (タイトル部分)
        -   ボタンロール (`role="button"`) や `aria-expanded` 属性を適切に付与
        -   キーボード操作: フォーカス可能、Enterキーで開閉
    -   コンテンツ部
        -   開閉に合わせてスムーズに高さが変化するCSSトランジションを設定可能
    -   デザイン参照
        -   Figma提供のデータを参照
        -   必要ならデジタル庁DS v1.4.3のガイドライン（Figma内）も参照
    -   アクセシビリティ
        -   開閉状態をARIAで通知 (`aria-expanded`)
        -   タブ移動順に配慮

### インプットテキスト
-   **概要**
    -   用途: ユーザーが「一行程度のテキスト」（氏名、電話番号など）を入力するためのフォーム部品
    -   基礎要素: `<input type="text">`
    -   構成パーツ (最大5つ)
        -   ラベル（項目名）: 入力欄上部に配置
        -   必須表示ラベル: 必要に応じ「※必須」など付加
        -   サポートテキスト（入力例や補足説明）: 入力欄の下または上部に配置。入力内容に制約がある場合や例を示すのに使用
        -   エラーメッセージ: バリデーション失敗時に入力欄直下に表示。問題点と改善策を赤字で示す
    -   サイズ定義: Large, Medium, Small (用途に応じて選択)
-   **実装**
    -   HTML要素
        -   標準の `<input>` 要素を使用
        -   ラベル: `<label>` タグまたは `aria-label` で関連付け
    -   構造
        -   5つのパーツ（フィールド、ラベル、必須表示、サポート文、エラー文）を適切なHTML構造にする
        -   例: ラベルと入力欄は `<div>` で囲んでレイアウト
        -   必須表示「※」: ラベルテキスト内に `<span class="required">` を設けCSSで赤字表示
    -   アクセシビリティ
        -   サポートテキスト: `aria-describedby` で入力欄と関連付け
        -   必須入力欄: HTMLの `required` 属性を付与
        -   エラー表示:
            -   バリデーション後に該当フィールドに `aria-invalid="true"`
            -   エラーメッセージ要素に `aria-live` で視覚障がい者にも通知
    -   スタイリング
        -   入力欄の幅: 想定入力内容に合わせCSSの `width` を調整 (例：郵便番号欄は短く)
        -   フィールド幅の考え方: 全て同一幅にせず、内容に適した長さで直感的に入力しやすく

### カード
-   **概要**
    -   定義: 単一のテーマに関するコンテンツをまとめて表示するコンテナ型コンポーネント
    -   内容: 様々なタイプ・サイズの要素、他のコンポーネント、アクションボタン等を柔軟に配置可能
    -   用途例: サービスの概要、ニュース記事のサマリー表示
        -   画像・タイトル・本文抜粋・ボタンなどを一つのカード内に収めて一覧表示
        -   各コンテンツの塊を視覚的に分離し見やすくする
    -   パーツ定義 (最大4つ)
        -   コンテナ
        -   メインエリア (主情報)
        -   イメージエリア (画像等ビジュアル)
        -   サブエリア (補足情報や日時など)
    -   インタラクション
        -   カード全体をクリック可能にする場合: アクセシビリティに配慮し、内部に適切なフォーカス管理
            -   原則: カード内に明確な「詳細を見る」ボタン等を配置
-   **実装**
    -   基本構造
        -   外枠コンテナに統一クラス（例: `.card`）
        -   内部に必要なHTML構造を配置
        -   例: `.card`内に `.card-img` (画像領域), `.card-body` (本文領域), `.card-sub` (副情報領域) 等
        -   CSSグリッドやフレックスでレイアウト
    -   スタイリング
        -   適切な角丸とシャドウ（エレベーション）を付与
        -   背景は白などに設定
    -   レスポンシブ対応
        -   横並び→縦並びへの変更などをCSSメディアクエリで行う
    -   カード全体のリンク化
        -   `<a>` タグで囲う
        -   またはJavaScriptでクリックイベントをコンテナに付与
        -   アクセシビリティ対応:
            -   内部のボタン等フォーカス要素は機能させる
            -   `role="link"` や `tabindex="0"` の付与でキーボード操作に対応

### 緊急時バナー
-   **概要**
    -   目的: サイト通常の情報提供を中断してでも画面ファーストビューを占有し、ユーザーの注意を喚起
    -   用途: 災害や障害など緊急情報を速やかに周知
    -   表示位置: ページ最上部に目立つ帯状のバナーとして表示
    -   設計思想: シンプルな構造と強い視認性を最優先
    -   構成要素:
        -   背景色: はっきりした色 (例: 赤系)
        -   見出しテキスト: 「【緊急】」など明示的な文言を含む
        -   アクションボタン: 必要に応じて詳細ページへのボタン
-   **実装**
    -   配置
        -   ページの `<header>` 直下などに緊急時バナー用のコンテナを配置
    -   スタイリング
        -   背景色: 高コントラストの警告色 (例: #C00 等)
        -   テキスト: 太字大きめ (例: 18px以上)、先頭に「【緊急】...」
    -   インタラクション
        -   バナー全体をリンクにしない (推奨)
        -   詳細を見るボタン（例: `<a>` や `<button>`）のみにクリック可能領域を限定
            -   理由: 誤クリック防止、スクリーンリーダーで目的を伝えやすくするため
    -   表示方法
        -   サイトの他部分を押し下げて最上部に挿入
        -   または固定表示 (コンテンツと重ならないよう `body` の上に余白を確保)
    -   制御
        -   状況に応じて表示・非表示を制御
        -   緊急でなくなったら速やかにDOMから除去

### グローバルメニュー
-   **概要**
    -   定義: サイト全体の主要ページへのリンクをまとめたナビゲーションバー
    -   配置: 通常は画面上部
    -   表示形式: 横並びのメニュー項目（ヘッダーナビ）
    -   行政サイトの例: 「ホーム」「ご利用案内」「問い合わせ」等
    -   役割: ユーザーがサイト内を移動する道しるべ
    -   多階層メニュー: ホバーやクリックでドロップダウンするサブメニュー（メガメニュー参照）を含むことも
    -   デザイン考慮点:
        -   視認性の高いコントラスト
        -   十分なクリック領域
        -   キーボード操作 (Tabキーでフォーカス移動、Enterで選択)
-   **実装**
    -   HTML構造
        -   `<nav>` 要素内にメニューのリスト (`<ul><li><a>`) を構造化
    -   サブメニュー対応
        -   `aria-haspopup="true"` や適宜 `role="menu"` を付与
        -   キーボード操作: Arrowキーで上下移動 (JavaScriptで制御)
    -   スタイリング
        -   ヘッダー部に固定配置
        -   背景色: サイトのブランド色 (例: 紺色)
        -   各リンク: 十分なパディング (左右20px程度)、ホバー時に下線や背景ハイライト
    -   レスポンシブ対応 (モバイル)
        -   ハンバーガーメニューに切り替え
        -   `display: none`/`block` の切替や `transform` でスライドイン
    -   アクセシビリティ
        -   ナビゲーション領域にラベル (例: `aria-label="グローバルナビゲーション"`)
        -   メニュー開閉時に `aria-expanded` を適切に更新

### スクロールトップボタン
-   **概要**
    -   目的: 長いページを閲覧したユーザーがワンクリックでページ先頭に戻る
    -   表示: 通常は画面右下などに小さな丸型もしくは矢印アイコン付きボタン
    -   出現条件: ページを一定量スクロールすると現れる
    -   アクセシビリティ:
        -   「トップへ戻る」などテキストのツールチップや `aria-label` を設定
        -   キーボードフォーカスでも利用可能
-   **実装**
    -   配置 (CSS)
        -   画面右下固定位置: `position: fixed; bottom: 20px; right: 20px;` など
    -   表示制御 (JavaScript)
        -   ページ冒頭では非表示
        -   `window.scrollY` が一定値を超えたら表示
    -   アクション (JavaScript)
        -   ボタンの `onclick` で `window.scrollTo({top:0, behavior:'smooth'})` を呼び出しスムーズスクロール
    -   HTML構造
        -   `<button>` 要素に矢印アイコンを配置
        -   隠しテキスト「ページトップへ」を含めてスクリーンリーダー対応 (`aria-label` も可)
    -   スタイリング・インタラクション
        -   サイズ: タップしやすいよう最低44px四方を確保 (モバイル考慮)
        -   ホバー時: 少し目立つエフェクト (色変化や陰影)

### セレクトボックス
-   **概要**
    -   用途: いくつかの選択肢からユーザーが1つを選ぶフォーム部品 (ドロップダウンメニュー形式)
    -   別名: プルダウン、ドロップダウンリスト
    -   使用例: 都道府県選択など多数の選択肢を省スペースで提供
    -   デザイン: 入力テキストと統一感のあるスタイル
    -   構成要素: ラベル、必須表示、エラーメッセージも組み合わせて使用
    -   表示:
        -   選択中の値: ボックス内に表示
        -   未選択時: プレースホルダー的な文言（例：「選択してください」）を薄字で表示
-   **実装**
    -   HTML要素
        -   標準の `<select>` 要素とその子 `<option>`
        -   カスタム実装の場合: `role="listbox"` 等のARIAを適用
    -   スタイリング (カスタムルック)
        -   ブラウザ標準UI差異のため、CSSで `appearance: none;` を使用
        -   カスタム矢印アイコンを背景に挿入
        -   例: プルダウン矢印アイコンを右端に配置、`padding-right` を十分取りテキストと重ならないように
    -   アクセシビリティ
        -   ラベルとの関連付け: `<label for>` と `select id`
        -   エラー時: `<select aria-invalid="true">` を付与、エラーメッセージを `aria-describedby` で関連付け
    -   オプションの構造化
        -   選択肢が多い場合: グループ化 (`<optgroup>`)
        -   キーボード操作: アルファベットジャンプ選択など標準挙動を損なわない
    -   モバイル対応
        -   OS標準のセレクトUIとなるため基本はそのまま使用
        -   必要に応じて選択中の値を大きめに表示するCSSを適用するなどの調整

### チェックボックス
-   **概要**
    -   用途: 複数選択が可能な入力要素。ユーザーが項目のオン/オフ状態を切り替える
    -   提供形式: 複数のチェックボックスを一つのグループとして提供 (例：利用規約同意、興味ある分野の選択)
    -   デザイン:
        -   正方形のボックスとラベルから構成
        -   選択時にチェックマーク（✔）が現れる
        -   ラベルはボックスの右側に配置
        -   複数項目を縦に並べる際は適度な余白
    -   操作性:
        -   小サイズ画面でも押しやすいようボックスとラベル全体をまとめてクリック可能
        -   チェックボックス自体も最低24px程度のクリックターゲットを確保
-   **実装**
    -   HTML構造
        -   `<input type="checkbox">` と直後に `<label>` を配置
    -   カスタムスタイル (CSS)
        -   デフォルトのチェックボックスは非表示 (例: `opacity:0; position:absolute;`)
        -   代わりに疑似要素で枠とチェックマークを描画
            -   例: `input[type=checkbox]::before` で正方形枠
            -   例: `input[type=checkbox]::after` でチェック✓を描き、`:checked` で表示切替え
    -   アクセシビリティ
        -   ラベル関連付け: `<label for="...">` でテキストクリックでもON/OFF可能に
        -   グループ化: `<fieldset>` と `<legend>` でグループ化し、スクリーンリーダーにグループ名を伝達
    -   ユーティリティクラス (例: Tailwind CSS)
        -   `.form-checkbox` 等のクラスを適用して一定のスタイル（MサイズやLサイズ）を設定
    -   中間状態 (Indeterminate)
        -   `indeterminate` プロパティで制御
        -   必要ならデザインに反映

### ディスクロージャー
-   **概要**
    -   定義: 折り畳まれた追加情報をユーザー操作で表示させるUI (詳細表示トグル)
    -   類似コンポーネント: アコーディオン (主に設定画面等で「詳細設定を表示/非表示」のように使用)
    -   操作: ボタンまたはリンクにより開閉を制御
    -   表示変化: 開閉状態に応じてラベルテキストや矢印アイコンが変化 (例: 「▶詳細を表示」「▼詳細を非表示」)
    -   利点: 初期表示を簡潔に保ちつつ、必要な時に詳細情報を展開
-   **実装**
    -   基本構造 (カスタム実装)
        -   ARIA `aria-expanded` 属性付きのボタンを用意
        -   押下時に対象コンテンツを表示 (CSSで `display:block` 等) するスクリプトを実装
    -   ARIA属性
        -   開閉ボタンとコンテンツを `aria-controls` で関連付け
        -   開閉時に `aria-expanded` の真偽値を切り替えてスクリーンリーダーに状態を通知
    -   視覚的フィードバック
        -   ボタンに右向き三角▶を表示し、開いたら下向き▼にCSS置換など
    -   コンテンツ部分
        -   `<div role="region">` 等を付与推奨
    -   HTML5ネイティブ要素
        -   `<details>` 要素も利用可能
        -   デザインカスタマイズやラベル変更の柔軟性のためカスタム実装する場合もある

### ディバイダー
-   **概要**
    -   定義: コンテンツ間の区切り線（水平線）
    -   役割: セクションや項目を視覚的に分離し、情報のグルーピングをわかりやすくする
    -   デザイン: 細いグレーのラインとして実装。余白と組み合わせて段落間の切れ目を明確に示す
    -   用途: 垂直方向の区切りとしてサイドバーとの境界に用いる場合もある
-   **実装**
    -   HTML要素
        -   `<hr>` 要素をそのまま使用
        -   または `<div class="divider">` としてCSSで高さ1pxの線を描画
    -   スタイリング
        -   色: ニュートラルカラーの中間色 (例: #DDD)
        -   幅: 親コンテナ100%
        -   余白: 上下に適切なマージン (例: 16px) を設けて他要素と間隔をとる
    -   アクセシビリティ
        -   `role="separator"` を付与
        -   `aria-hidden="true"` も加えてスクリーンリーダーには不要に読み上げられないように (内容は見出し構造で伝達)
    -   その他考慮点
        -   印刷時やダークモードでも見えるようコントラストに配慮した色を選択

### テーブル／データテーブル
-   **概要**
    -   定義: 表形式でデータを表示するコンポーネント
    -   推奨: 特定のカスタム部品ではなく、HTMLの `<table>` 要素の適切なスタイリングと利用 (v2で変更)
    -   構成: ヘッダー行（列見出し）とデータ行
    -   役割: 行・列のグリッドで情報を比較しやすくする
    -   デザイン:
        -   見出し: `<th>` を用いて明示
        -   視認性向上: 縞模様や境界線で行列を判別しやすく
    -   レスポンシブ対応:
        -   テーブルを横スクロール可能にする
        -   または項目名を各セルに表示するスタック形式など
-   **実装**
    -   HTML構造
        -   標準の `<table><thead><tbody>` 構造
        -   適宜 `<caption>` で表のタイトル
    -   スタイリング (CSS)
        -   テーブル全体: `border-collapse: collapse;`
        -   セル: 下線 (`border-bottom:1px solid #ccc`) や交互背景 (`:nth-child(even)` で薄色)
        -   見出しセル `<th>`: 太字
    -   レスポンシブ対応
        -   横スクロール: 親要素に `overflow-x: auto;` を設定
        -   スタック形式: CSSメディアクエリでカード型（各行をブロック状に）表示
    -   ARIA属性
        -   並び替え可能な列ヘッダ: `aria-sort`
        -   集計行: `role="rowgroup"` などアクセシビリティ対応
    -   参考: デザインシステム付属のStorybookでTailwind CSSクラスを用いたテーブルサンプル提供

### テキストエリア
-   **概要**
    -   用途: 複数行のテキスト入力が必要な場合 (コメント、住所など長文)
    -   HTML要素: `<textarea>`
    -   構成: インプットテキストと同様にラベル・サポートテキスト・エラーメッセージを伴う
    -   デザインルール:
        -   高さ: 内容に応じて可変、初期表示は3～5行程度確保
        -   リサイズ: 必要に応じてユーザーがドラッグで高さ調整できるよう `resize: vertical` を許容
-   **実装**
    -   HTML要素
        -   `<textarea>` タグを使用
        -   属性 `rows` で初期表示行数を指定
    -   スタイリング (CSS)
        -   `min-height` で最低高さを保証
        -   (v2.4では `field-sizing: content` の扱いが変更され、高さ自動調整はサンプルのみに)
    -   高さ調整
        -   ユーザー入力行数増で高さを自動拡張するスクリプト
        -   またはスクロールバー表示
    -   アクセシビリティ
        -   ラベル関連付け: `<label for>`
        -   エラー時: 枠線色をエラーカラーに変更、エラーメッセージ表示
    -   キーボード操作
        -   Tabキーで別の入力に移動
        -   必要なら `Ctrl+Enter` で改行挿入などのUI支援も検討
    -   フォント・行間
        -   読みやすいサイズ (16px以上) を維持
        -   行間も適度に設定

### ドロワー
-   **概要**
    -   定義: 画面の端からスライドインするパネル型コンテナ
    -   用途: ナビゲーションメニューやフィルターオプションなど補助的内容を一時的に表示
    -   典型的例: モバイル画面でハンバーガーメニュータップで左から現れるメニュー一覧
    -   表示:
        -   主要コンテンツと重なって表示
        -   背景に半透明のシェードを敷き、ユーザーの注意をドロワー内容に集中
    -   非表示: ドロワー内の項目選択または明示的な閉じる操作
-   **実装**
    -   HTML/CSS構造
        -   ドロワー用コンテナ: `<div class="drawer">` を `position: fixed; top:0; bottom:0; left:0;` 等で配置
        -   初期状態: `transform: translateX(-100%);` で画面外
        -   開く時: CSSトランジションで `translateX(0)`
        -   オーバーレイシェード: `<div class="drawer-backdrop">` を固定配置、`background: rgba(0,0,0,0.5)`
    -   開閉制御 (JavaScript)
        -   開くボタン押下: `drawer` 要素に `.open` クラス付与
        -   同時に `body` にスクロール禁止 (`overflow: hidden`) を適用
    -   閉じる操作
        -   閉じるボタン（「×」アイコン）: フォーカス可能な `<button>`
        -   Escキーでも閉じられるようイベントハンドラ追加
    -   アクセシビリティ (フォーカストラップ)
        -   ドロワー内の最後の要素からTabで先頭に戻す (逆も然り)
    -   ARIA属性
        -   ドロワー: `role="dialog"`、適切な `aria-label`
        -   背後コンテンツ: `aria-hidden="true"`

### ノティフィケーションバナー
-   **概要**
    -   定義: サイト内のユーザーへの通知やメッセージを表示する帯状のコンポーネント
    -   用途: 一般のお知らせ (例：メンテナンス予定、クッキーポリシー通知など) ※緊急時バナーほどの最優先度ではない
    -   配置: 通常ページ上部またはコンテンツエリア内
    -   視覚的特徴:
        -   背景色とアイコンで種別を示す
            -   例: 情報=青アイコン、成功=緑、警告=黄、エラー=赤
        -   テキストと共に右端に閉じる（×）ボタン
    -   表示期間: ユーザーが明示的に閉じるか、一定時間表示後に自動で消える
-   **実装**
    -   HTML構造
        -   バナー用コンテナ: `<div class="notification notification-info">` 等
        -   種別に応じてクラスを付与して背景色やアイコンを変更
            -   例: `.notification-info`: 青系背景、infoアイコン (”i”マーク)
            -   例: `.notification-success`: 緑背景、チェックマーク
    -   アイコン
        -   `::before` 疑似要素や `<img>` タグで挿入
    -   テキスト
        -   簡潔に記述
        -   CSSで `max-width` を設け改行 (冗長防止)
    -   閉じるボタン
        -   `<button aria-label="通知を閉じる">` としてバナー右上に配置
        -   押下で親要素を `display: none` にするJS
    -   自動消去
        -   必要な場合: `setTimeout` で数秒後にfade-out
    -   ARIA属性
        -   表示中は適切な `role="status"` または `role="alert"` を付与 (スクリーンリーダーに即時読み上げ)

### パンくずリスト
-   **概要**
    -   定義: 現在表示中のページのサイト内階層（経路）を示すナビゲーション
    -   役割: ユーザーが現在位置を把握しやすくし、上位階層へ遡る手段を提供
    -   表示形式: 「ホーム > カテゴリ > サブカテゴリ > 現在ページ」のように「>」区切りで横並び
    -   リンク構造:
        -   先頭のホームページへのリンク以外は各階層名がリンク
        -   末尾の現在ページはリンクではなくテキスト表示
    -   配置: 小さなフォントサイズでヘッダー直下に配置されることが多い
-   **実装**
    -   HTML構造
        -   `<nav aria-label="パンくずリスト">` 内に `<ol class="breadcrumb">`
        -   各階層を `<li>` で並べる
    -   区切り文字「>」
        -   CSS `li::after { content: '>'; }`
        -   または視覚的アイコン (スクリーンリーダーには `aria-hidden="true"` で読み飛ばし)
    -   リンクテキスト
        -   各リンクにはページタイトルをそのまま使用 (省略は避ける)
    -   現在ページ
        -   `aria-current="page"` 属性を付与
        -   リンクでないテキストとして `<span>` で表示
    -   スタイリング
        -   フォント: やや小さく、控えめな色 (例: `color: #666;`)
        -   リンク部分: 下線なし
    -   モバイル対応
        -   長い場合: 省略や横スクロールを検討
    -   複数存在する場合
        -   `<nav>` にユニークな `aria-label` を設定して区別

### ハンバーガーメニューボタン
-   **概要**
    -   定義: 3本線のアイコンで表示されるモバイル向けメニュー開閉ボタン
    -   役割: 画面幅が狭い場合にグローバルナビゲーションを隠し、ボタンタップでサイドメニュー（ドロワー）を表示
    -   機能: 「メニューを開く」
    -   アイコン変化:
        -   閉じた状態: ハンバーガー（三横線）アイコン
        -   開いた状態: 「×」アイコン (一般的)
-   **実装**
    -   HTML要素
        -   `<button>` 要素
        -   ハンバーガーアイコンを背景画像やSVGで表示
    -   アクセシビリティ
        -   隠しテキスト「メニュー」をボタン内に含める
        -   または `aria-label="メニュー"` を付与
        -   `aria-expanded` 属性をtrue/falseで更新 (JSで制御)
    -   インタラクション (JavaScript)
        -   クリック時にドロワーの表示を切替え
    -   アイコン変更 (CSS/SVG)
        -   ボタンに `.open` クラスを付与してCSSで背景画像を切り替え
        -   SVGなら `<use>` 参照先を変更
    -   フォーカス
        -   アウトラインはデフォルトを残しつつ、視認性を高めるスタイル（濃色枠など）を適用
    -   メニュー展開時の処理
        -   画面ロック処理（スクロール無効化）
        -   背景コンテンツにフォーカスが当たらないようにする

### 日付ピッカー／カレンダー
-   **概要**
    -   定義: カレンダーUIから日付を選択する入力コンポーネント
    -   利点: 手入力せず直感的に日付指定、日付形式の誤り防止
    -   構成: テキストボックスとカレンダー表示が一体化
    -   表示トリガー: アイコン押下またはフィールドにフォーカスでポップアップカレンダー表示
    -   機能:
        -   月移動、年月選択
        -   土日祝の表示色、当日ハイライトなど視覚的手がかり
-   **実装**
    -   方法
        -   多機能なライブラリ（例: Flatpickr等）を使用
        -   または独自に `<table>` でカレンダーを構築
    -   独自構築の場合 (カレンダー部分)
        -   7列×6行程度のマス目を生成
        -   `<th>` に曜日、`<td>` に日付番号
        -   選択状態: `aria-selected` や `.selected` クラス
        -   今日の日付: `.today` クラスで枠や背景強調
        -   月移動ボタン: `aria-label="前の月"` 等
        -   キーボード操作: 矢印キーで日付間移動、Enterで選択
    -   入力フィールドとの連携
        -   日付選択時に `<input>` の値を所定フォーマット（YYYY-MM-DDなど）で更新
    -   ポップアップ制御
        -   `<div class="datepicker">` を絶対配置
        -   ボタンやフィールドフォーカスで表示、外部クリックやEscキーで非表示
    -   スクリーンリーダー対応
        -   カレンダー部分: `role="dialog"`、適切なラベル (例: `aria-label="カレンダー"`)
        -   フォーカスを閉じるまでカレンダー内に留める工夫

### プログレスインジケーター
-   **概要**
    -   定義: 処理の進捗状況をユーザーに示す要素
    -   用途: ページ読み込み、フォーム送信中など
    -   表示: 動的表示（スピナーやプログレスバー）で「ローディング...」と待機を促す
    -   提供形式 (デジタル庁DS)
        -   円形スピナー
        -   横長のプログレスバー
    -   アクセシビリティ: 現在の進捗割合または処理中である旨をスクリーンリーダーに伝える考慮
-   **実装**
    -   円形スピナー
        -   CSSアニメーションで回転する円や点を描画 (例: `@keyframes spin` で360度回転を無限ループ)
        -   HTML: `<div role="status" aria-live="polite"><span class="sr-only">読み込み中...</span></div>` (スクリーンリーダー用テキスト)
    -   プログレスバー
        -   `<progress>` 要素を使用
        -   または `<div class="progress"><div class="progress-bar"></div></div>` で内側バー幅を変化
        -   進捗率が分かる場合: `value` と `max` 属性 (例: `<progress value="30" max="100">`)
            -   スクリーンリーダーには百分率が読み上げられる
        -   不確定 (Indeterminate) な場合: `aria-hidden="true"` のスピナーと「処理中」テキストで対応
    -   スタイリング・アニメーション
        -   見た目: テーマカラー（例: プライマリの青）で統一
        -   アニメーション: CSS `animation` で実装
    -   ユーザー制御
        -   OSの「簡易表示」設定に連動してアニメ停止も検討

### ページネーション
-   **概要**
    -   定義: 複数ページに分かれたコンテンツのページ送りナビゲーション
    -   用途: 検索結果や一覧表示で下部に表示 (例: 「1 2 3 ... 次へ 最後»」)
    -   機能: ユーザーが任意のページ番号や前後ページに移動
    -   利点: 大量の項目を少ない画面領域で扱う
    -   表示:
        -   現在ページ: 強調表示、リンクではなくテキスト
        -   先頭/前/次/末尾へのリンクも併置
        -   全ページ中の位置を把握しやすくする
-   **実装**
    -   HTML構造
        -   `<nav aria-label="ページネーション">` 内に `<ul>` でページ番号リンクをリスト化
        -   例: `<li><a href="?page=1">1</a></li>`
        -   現在ページ: `<li aria-current="page"><span>2</span></li>`
        -   先頭/前へ等: `rel="prev"`, `rel="first"` 属性も推奨
    -   スタイリング (CSS)
        -   横並び
        -   `.active` クラス (または `aria-current` の項目) に背景色や太字で強調
    -   操作性
        -   非アクティブなページでも最低44px四方のクリック領域を確保 (モバイルタップ容易性)
    -   アクセシビリティ
        -   リンクに数字だけでなく `aria-label="3ページ目"` などを付与も可
        -   大量ページの場合: 「...」省略表示ロジックを実装
            -   DOM上適切に `aria-hidden` を付与してスクリーンリーダーに読み飛ばさせる配慮

### ヘッダーコンテナ
-   **概要**
    -   定義: サイト上部のヘッダー領域全体をまとめるコンテナ
    -   配置要素例: ロゴ、サイト名、グローバルメニュー、言語切替、検索ボタン等のユーティリティリンク
    -   ガイドライン (デジタル庁DS):
        -   レイアウトや背景色
        -   視認性が高く、ブランドイメージを反映しつつ各要素を見やすく配置
        -   スクロール時にヘッダーを固定表示（Stickyヘッダー）する場合にも対応
-   **実装**
    -   HTML構造
        -   ページ先頭に `<header role="banner">` 要素
        -   その中に `<div class="header-container">`
    -   スタイリング
        -   全幅背景色付きのバー
        -   内側に `max-width` のラッパーを用いて中央寄せ
    -   ロゴ・サイト名
        -   ロゴ画像: `<img>` に適切な代替テキスト
        -   サイト名: 見出し (`<h1>`) に配置、またはロゴに含める場合は `aria-label`
    -   要素配置 (CSS Flexbox等)
        -   グローバルメニューや言語切替をヘッダー内の適切な位置に
        -   左右にスペース分け (例: ロゴ左寄せ・メニュー右寄せ)
    -   モバイル対応
        -   ヘッダー内で2行に折り返す
        -   またはハンバーガーメニューで隠す
    -   視覚的区切り
        -   ヘッダーコンテナ自体に下部ボーダーやシャドウ
    -   Stickyヘッダー
        -   `position: sticky; top: 0; z-index: 100;` を適用

### ボタン
-   **概要**
    -   定義: ユーザーのアクション実行（送信・決定など）やページ遷移のトリガー
    -   スタイルバリエーション (重要度に応じて)
        -   **プライマリーボタン**: 主要な操作、一つの画面で原則1つ
            -   視覚: 塗りつぶしの強調色背景＋白文字
        -   **セカンダリーボタン**: 補助的な操作、複数可
            -   視覚: 枠線のみのボタン
        -   **ターシャリーボタン**: さらに控えめな操作、テキストリンク風
            -   視覚: 背景なし下線付きテキスト
    -   形状・インタラクション
        -   通常矩形角丸
        -   ホバー時・フォーカス時: 下線表示など視覚フィードバック
    -   サイズ定義: Large/Medium/Small/X-Small
        -   最低幅・高さ（例: L=136×56px, M=96×48pxなど）を満たす
    -   キーボード操作: 原則すべてフォーカス可能、Enter/Spaceで押下アクション実行
-   **実装**
    -   HTML要素
        -   `<button>` 要素
        -   または `<a role="button">`
    -   スタイル分け (CSSクラス)
        -   例: `.btn-primary`, `.btn-secondary`, `.btn-tertiary`
    -   CSSスタイリング
        -   各種ボタンの背景色・枠線・文字色
        -   ホバー時: 明度変更
        -   フォーカス時: `outline` や下線追加
    -   アイコン付きボタン
        -   テキストと `<span>` でアイコンフォント等を並べ、視覚的中心を揃える
    -   サイズ
        -   横幅: 基本可変、左右に充分なpadding、テキスト長に応じて伸縮
        -   高さ: 行高に応じ自動拡張、最小高さをCSSで指定し揃える
    -   無効ボタン (`disabled` 属性)
        -   クリック不可、アクセシビリティ上フォーカスも当たらず説明不足になりがち
        -   推奨: 可能な限り無効状態は避け、代わりに押下できない理由や次のアクションを案内
        -   やむを得ず無効化する場合:
            -   ボタン直近に説明テキスト配置 (例: 「※○○を入力すると有効になります」)
            -   ARIA上 `aria-disabled="true"` も付与し、ユーザーに状態を伝達

### ボトムナビゲーション
-   **概要**
    -   定義: 主にスマートフォン画面下部に配置される固定メニュー
    -   表示: 画面下に常時表示、アプリ風の操作体験を提供
    -   構成: 一般的にアイコン＋ラベルのタブが3～5項目
    -   用途: ホーム・検索・お気に入り・設定など主要機能に直接アクセス
    -   アクティブ表示: 選択中のタブはアイコンの色が変わるなど視覚的に示す
-   **実装**
    -   HTML/CSS構造
        -   画面下部に `<nav class="bottom-nav">` を `position: fixed; bottom:0; width:100%;` で固定
        -   内部に `<ul>` でタブ項目 (`<li><a>`) を並べる
            -   アイコン: SVGまたはWebアイコンフォント
            -   ラベル: アイコンの下に小さなテキスト
    -   レイアウト・スタイリング (CSS)
        -   CSSフレックスで横並び等分
        -   `.active` クラスのついたリンクに強調色 (例: `color: #0078D4;`)
    -   操作性
        -   タブのタッチ領域: 少なくとも48px四方になるようpadding調整
    -   アクセシビリティ
        -   ラベル: 小さく、省スペースのため必要に応じ略語を使い `aria-label` で補完
    -   コンテンツとの重なり防止
        -   `body` の下部にコンテナの高さ分の `padding-bottom` を追加
    -   iOS Safari対応
        -   固定要素の挙動に注意
        -   必要なら `viewport-fit=cover` やSafe Area Insetsに対応

### メガメニュー
-   **概要**
    -   定義: いわゆる大型のドロップダウンメニュー。グローバルメニューの一部として多数のリンクやカテゴリーを一度に表示
    -   表示トリガー: 上部ナビの項目にホバーまたはクリック
    -   表示内容: ページ幅に近い大きさのパネルが下に展開。複数列のリンクリストや画像付きの案内
    -   有効なケース: 官公庁サイトのようにコンテンツが多岐にわたる場合
    -   レイアウト: カテゴリー見出しとリンク一覧を列ごとに配置し、一目で全貌を把握
-   **実装**
    -   HTML構造
        -   ナビゲーション項目の一つに大きなサブメニューを仕込む
        -   `<li class="has-megamenu">` 内に通常の `<a>`
        -   次の兄弟要素に `<div class="megamenu">` (パネル)
        -   パネル内: 適宜 `<div class="column">` で列を作成
            -   各列に `<h4>カテゴリー</h4><ul>リンク...</ul>` のようにまとめる
    -   CSSスタイリング
        -   パネル: `position: absolute; top:100%; left:0; width: 100vw;` など
        -   背景: 白色、枠線やシャドウで浮き上がらせる
    -   表示制御
        -   ホバーで開く: 親 `li:hover .megamenu { display:block; }`
        -   クリックで開く: JSで `.open` クラスを付与
    -   キーボード操作
        -   親リンクにフォーカス時、パネルも `display:block`
        -   パネル内のリンク群にTab移動可能に
        -   最後のリンクからTabでパネルを閉じ、次要素にフォーカスを送るスクリプト
    -   スクリーンリーダー対応 (ARIA)
        -   親リンク: `aria-haspopup="true"`
        -   パネル: `role="menu"`
        -   開閉に合わせて `aria-expanded` を変更

### メニューリスト
-   **概要**
    -   定義: 一連の操作項目を縦方向に並べたリスト形式のメニュー
    -   用途例: ユーザープロフィールメニュー、設定メニュー、コンテキストメニュー
    -   特徴:
        -   項目間に区切り線（ディバイダー）を挟むことも
        -   通常背景はカード状のパネル
        -   項目にホバー/フォーカス時のハイライト
-   **実装**
    -   HTML構造
        -   `<ul class="menu-list">` としてリスト表示
        -   各 `<li>` にリンクまたはボタンを配置
    -   アイコン付き項目
        -   `<li>` 内で `<img>` や `<span class="icon">` を先頭に配置
        -   その後にテキストを置きフレックスレイアウトで整列
    -   CSSスタイリング
        -   `.menu-list`: 白背景・ボーダー角丸・シャドウ
        -   `.menu-list li`: `padding: 8px 16px;`
        -   `:hover`, `:focus`: 背景色を薄いグレーに変更
        -   現在選択中の項目: `.active` クラスで濃いハイライト
    -   コンテキストメニューとして使用する場合
        -   表示時に適切な位置（クリック位置など）に `position: absolute` で配置
        -   表示/非表示をJS制御
    -   キーボード操作
        -   リストの最初の項目にフォーカスが来るように
        -   Escキーでメニューを閉じる処理

### メニューリストボックス
-   **概要**
    -   定義: メニューリストにスクロールや選択機能が付いたコンポーネント
    -   用途:
        -   大量の項目を含む場合
        -   リストから単一選択して値を確定するUI (通常のセレクトボックス拡張版)
        -   例: 検索バーの候補表示ドロップダウン
    -   操作: ユーザーは矢印キーで項目間移動、Enterで選択確定
-   **実装**
    -   ARIAパターン: リストボックスパターンに従う
    -   HTML構造
        -   `<ul role="listbox">` 内に `<li role="option">` を並べる
    -   キーボード操作 (JavaScript)
        -   例: Downキー押下で次の `li[role=option]` に `.focused` クラス付与 (視覚ハイライト)
        -   例: Enter押下でその項目値を親入力に反映・リストを閉じる
    -   スクロール
        -   項目が多い場合: `.listbox` に固定高さと `overflow-y: auto`
        -   フォーカスがリスト外に出ると自動で閉じるよう制御
    -   選択状態
        -   `aria-selected="true"` を選択項目に付与
        -   CSSで背景色
    -   注意点:
        -   単に多数のリンクを縦スクロール表示する場合もスタイル適用可能
        -   その際は役割を `menu` ではなく `listbox` とし、スクリーンリーダーに適切に伝達

### モーダルダイアログ
-   **概要**
    -   定義: ユーザーの現在の操作を中断してメッセージや入力フォームを表示する重ねウィンドウ
    -   モーダル状態: 背景コンテンツを半透明シェードで覆い、ダイアログが閉じられるまで背後は操作不可
    -   用途例: 確認ダイアログ、設定画面
    -   構成: タイトル、本文、アクションボタン（OK/キャンセル等）、閉じるボタン（×）(右上に)
-   **実装**
    -   HTML構造
        -   `<div role="dialog" aria-modal="true" aria-labelledby="dlgTitle">`
    -   CSSスタイリング・配置
        -   `position: fixed; z-index: ...;` で画面中央に配置
        -   背景シェード: `<div class="modal-backdrop">` を `position: fixed; top:0; left:0; width:100%; height:100%; background: rgba(0,0,0,0.5);`
        -   ダイアログ本体: 白背景・角丸・シャドウ付きコンテナ。適切な幅 (モバイル90%, PC 400px程度)
    -   内部構造
        -   タイトル: `<h2 id="dlgTitle">`
        -   本文: `<div class="modal-body">`
        -   ボタン類: `<div class="modal-footer">`
    -   フォーカス管理 (JavaScript)
        -   初期表示時: モーダル内の最初のフォーカス可能要素にフォーカス
        -   Tabキー: モーダル内で循環
    -   閉じる操作 (JavaScript)
        -   Escキー押下でも閉じる
        -   閉じる際: モーダル要素とバックドロップ要素をDOMから削除または非表示
        -   背後のスクロール禁止 (`overflow:hidden`) も解除
    -   フォーカス復元 (JavaScript)
        -   開く前に記憶した直前のフォーカス位置に、閉じた後フォーカスを戻す (重要)

### モバイルメニュー
-   **概要**
    -   定義: スマートフォン画面向けに構築されたナビゲーションメニュー全般
    -   形態例:
        -   ハンバーガーボタンで開閉する縦型メニュー
        -   画面全体を覆うメニュー画面
    -   デザイン特徴: 小画面で操作しやすいようシンプルで大きめのタップ目標
    -   項目表示: 縦に一覧表示。必要に応じて折りたたみ式のサブメニューも含む
-   **実装**
    -   一般的実装: ハンバーガーメニューボタンクリックで**ドロワー**コンポーネントとしてメニュー一覧表示
    -   HTML構造 (ドロワー内)
        -   `<nav class="mobile-menu">`
        -   グローバルナビの `<ul>` をコピーまたは再利用
    -   スタイリング
        -   背景: 白
        -   テキスト: 大きめ (18px程度)
        -   各項目を画面幅いっぱいにボタン風に表示
        -   リンク間に細い区切り線で見やすく
    -   サブメニュー (簡易アコーディオン)
        -   親項目: `<button>`
        -   子メニュー: インデントした `<ul>`
        -   ボタンクリックで子 `ul` の表示を切替え
    -   スクリーンリーダー対応 (ARIA)
        -   親項目ボタン: `aria-expanded`, `aria-controls` を付与し開閉状態を伝達
    -   閉じる操作
        -   ドロワーごと閉じる
        -   フォーカスを元のハンバーガーボタンに戻す
    -   スクロール・スワイプ
        -   リスト要素に `-webkit-overflow-scrolling: touch;` など指定 (スワイプで選択しないよう)
        -   スクロールはメニュー内のみに

### ユーティリティリンク
-   **概要**
    -   定義: サイト上部または下部に配置される付随的なリンク群
    -   例: 「お問い合わせ」「サイトマップ」「言語切替」「文字サイズ変更」など
    -   役割: 主コンテンツ閲覧を補助
    -   特徴: グローバルナビとは別枠、小さめの文字で配置。画面上部に細いバーでまとまることが多い
-   **実装**
    -   HTML構造
        -   ヘッダー内または直上に `<div class="utility-links">`
        -   `<a>` を横並びで配置
    -   区切り: リンク間に縦線 `|` を表示することも
    -   CSSスタイリング
        -   フォントサイズ: 小さめ (12px程度)
        -   色: 目立ちすぎない抑えた色 (例: `color: #555;`)
        -   ホバー時: 下線表示
    -   アイコン付きリンク (例: 言語切替)
        -   アイコン画像を隣に配置し視覚的に識別しやすく
    -   アクセシビリティ
        -   リンク群に `nav` ランドマークを付ける
        -   または適切な `aria-label` (例: 「ユーティリティナビゲーション」)
    -   レスポンシブ対応
        -   画面幅が狭い場合: 折り返すか、ハンバーガーメニュー内に移動

### ラジオボタン
-   **概要**
    -   定義: 複数の選択肢から**1つだけ**選ばせる入力部品
    -   構成: 複数の円形ボタン（○）と各ラベル
    -   動作: グループ内で同時に1つしか選択状態（●）にならない
    -   用途例: 「性別：男性/女性」、「支払い方法選択」
    -   UI特徴: チェックボックスと異なり単一選択、丸型で表現
    -   デザインシステム定義: Mサイズ・Lサイズなど。ホバー/フォーカス時に外枠色変化、選択時に中央に●表示
-   **実装**
    -   HTML構造
        -   `<input type="radio" name="group1" value="...">` と `<label>` を組み合わせ
    -   カスタムスタイル (CSS) - チェックボックス実装と類似
        -   `input[type=radio]` を非表示
        -   `::before` で外枠の円 (例: `border:2px solid #000; border-radius:50%`)
        -   `:checked::after` で内側の●を描画
    -   サイズ管理 (CSS変数)
        -   例: Lサイズ (外径24px・内径12px), Mサイズ (外径20px・内径10px)
    -   グループ化
        -   複数のラジオに同じ `name` 属性を持たせ、1つ選ぶと他は自動で非選択
    -   キーボード操作・フォーカス
        -   フォーカス時: 枠をハイライト (例: 青枠)
        -   上下矢印キーで同グループ内移動、スペースキーで選択 (ブラウザ標準挙動を妨げない)
    -   注意点
        -   一度選んだラジオを解除できない点について、必要ならUI上に補足 (例: 「（一度選択すると解除不可）」)

### ランゲージセレクター
-   **概要**
    -   定義: サイトの表示言語を切り替えるUI
    -   配置: 一般にヘッダーの隅
    -   形式例:
        -   「日本語｜English」のように現在の言語と他言語リンクを並列表記
        -   地球アイコンのメニューから選択
    -   デジタル庁DS提供形式: ドロップダウン型 (クリックで対応言語一覧表示)
    -   動作: ユーザーが選択するとその言語版サイトに遷移
-   **実装**
    -   シンプル切替リンクの場合
        -   ヘッダー右上に `<div class="lang-switch">`
        -   `<a href="?lang=ja">日本語</a>｜<a href="?lang=en">English</a>` のように並べる
        -   現在言語のリンク: 無効化または `aria-current="page"`
    -   ドロップダウン型の場合
        -   ボタン: `<button aria-haspopup="listbox" aria-expanded="false">言語</button>`
        -   押下時に言語リスト表示: `<ul role="listbox">` (各 `<li role="option">` に国旗アイコン+言語名)
        -   選択したらその言語URLに遷移
    -   現在言語の表示
        -   ボタンのラベルやアイコンで明示 (例: 「JP」アイコン)
    -   ARIA設定
        -   リスト: `aria-label="言語一覧"`
        -   現在の言語 `<li>`: `aria-selected="true"`
    -   不具合対応: Safariで選択肢がクリックできない不具合報告あり (v2.0.4で修正)。JS実装時はブラウザ検証。

### リスト
-   **概要**
    -   定義: 順序付き・順序なしの項目列挙にスタイルを適用したもの
    -   対象: HTMLの `<ul>`, `<ol>`
    -   デジタル庁DS提供デザイン:
        -   インデント幅やマーカー（箇条書き記号）などを統一
        -   例: `<ul>` デフォルト・ディスク型をカスタムのスクエア型やハイフンに変更
        -   例: `<ol>` 番号の後にピリオドを付けて揃える
        -   各リスト項目間の行間も読みやすいよう若干余白追加
-   **実装**
    -   スタイリング (CSS)
        -   CSSリセット等でブラウザ既定スタイルをクリア後、再設定
        -   例: `.list-unordered` クラスを `ul` につけ `list-style-type: disc; list-style-position: inside; margin-left: 1em;`
    -   カスタムマーカー
        -   `list-style-image`
        -   または疑似要素 `li::before` でコンテンツ挿入、余白と位置調整
    -   順序付きリスト (`ol`)
        -   `list-style-type: decimal;` (基本数字)
        -   必要に応じスタイルを `01.` のように整形
    -   ユーティリティクラス (例: Tailwind CSS)
        -   `list-disc`, `list-decimal` など
    -   入れ子リスト
        -   インデント幅をCSS変数で管理 (例: `--list-indent: 1.5rem;`)、階層ごとに調整

### リソースリスト
-   **概要**
    -   定義: 関連資料やリンク集を一覧表示するための特殊なリストコンポーネント
    -   用途例: ダウンロード用PDF、外部サイトリンクの一覧
    -   特徴: 各項目にアイコンやファイルサイズ、更新日などメタ情報を付与可能
    -   見た目: カードとリストの中間。各リストアイテムがボックス風の枠に入って区切られる
-   **実装**
    -   HTML構造
        -   `<ul class="resource-list">` 内に各リソース項目 `<li>`
        -   各 `<li>` 内: タイトル（リンク）、説明文、アイコンなど
            -   例: `<li><a href="file.pdf">資料名</a><span class="meta">PDF / 2MB</span></li>`
    -   CSSスタイリング
        -   `li`: 枠線・パディング付与
        -   隣接 `<li>` との間に余白
    -   アイコン
        -   ファイル種別に応じて表示 (例: PDFアイコン)
        -   `::before` 疑似要素でアイコンフォント、またはHTMLに `<img>`
    -   アクセシビリティ
        -   構造上リストなので `<ul>` を使用 (スクリーンリーダーにリスト項目として認識)
        -   外部リンク (`target="_blank"`) の場合:
            -   リンクテキストに外部アイコンを重ねる
            -   または `aria-label` で「別ウィンドウで開く」旨を付与
        -   キーボード操作: 各項目はTab移動で個別にフォーカス可能

## リソース

### デザインデータ・コードスニペット
-   **概要**
    -   提供リソースの種類
        -   **Figmaデザインデータ**
            -   v2系の最新コンポーネント図面やスタイルガイド
            -   Figma Communityで無料公開
            -   デザイナーが取得して自プロジェクト用にカスタマイズ可能
        -   **コードスニペット（React）**集
            -   主要コンポーネントのReact＋Tailwind CSS実装例
            -   GitHubリポジトリとStorybookで公開
            -   デザイントークンを組み込んだTailwind CSSプラグインも含む
        -   その他
            -   ウェブアクセシビリティ導入ガイドブック
            -   行政向けイラスト・アイコン素材
-   **実装ガイド**
    -   Figmaデザインデータの活用
        -   コンポーネントやスタイルの詳細仕様を確認
    -   コードリソースの活用
        -   GitHubの**デザインシステム用リポジトリ**をクローン
        -   含まれるReactコンポーネントやTailwind設定をプロジェクトに組み込み
            -   DS準拠のUIを効率良く構築
        -   Storybook: コンポーネントの動的挙動やコード例を閲覧 (例: ボタン、フォームの使用方法確認)
        -   Tailwind CSSプラグイン導入: `text-ds-heading`, `bg-ds-primary` 等の専用クラスでDSのカラー・タイポグラフィを再現
    -   利用条件・アップデート
        -   全リソース無料公開
        -   新バージョンへのアップデート情報はデジタル庁サイトのお知らせやRSSフィードで提供